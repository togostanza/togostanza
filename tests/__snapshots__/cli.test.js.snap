// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`build simple 1`] = `
Array [
  null,
  "",
  "   create stanzas/hello/metadata.json
   create stanzas/hello/README.md
   create stanzas/hello/index.js
   create stanzas/hello/style.scss
   create stanzas/hello/assets/.keep
   create stanzas/hello/templates/stanza.html.hbs
",
]
`;

exports[`build simple 2`] = `
Array [
  "-togostanza/",
  "-togostanza/Layout-HASH.js",
  "-togostanza/Layout-HASH.js.map",
  "-togostanza/help-app.js",
  "-togostanza/help-app.js.map",
  "-togostanza/index-app.js",
  "-togostanza/index-app.js.map",
  "assets/",
  "assets/foo",
  "hello.css",
  "hello.html",
  "hello.js",
  "hello.js.map",
  "hello/",
  "hello/assets/",
  "hello/assets/bar",
  "hello/metadata.json",
  "index.html",
]
`;

exports[`generate stanza non-interactive 1`] = `
Array [
  null,
  "",
  "   create stanzas/hello/metadata.json
   create stanzas/hello/README.md
   create stanzas/hello/index.js
   create stanzas/hello/style.scss
   create stanzas/hello/assets/.keep
   create stanzas/hello/templates/stanza.html.hbs
",
]
`;

exports[`generate stanza non-interactive 2`] = `
Object {
  "stanzas": Object {
    "hello": Object {
      "README.md": "# LABEL

Stanza description goes here. Edit \`stanzas/hello/README.md\` to update.
",
      "assets": Object {
        ".keep": "",
      },
      "index.js": "import Stanza from 'togostanza/stanza';

export default class Hello extends Stanza {
  async render() {
    this.renderTemplate(
      {
        template: 'stanza.html.hbs',
        parameters: {
          greeting: \`Hello, \${this.params['say-to']}!\`
        }
      }
    );
  }
}
",
      "metadata.json": "{
  \\"@context\\": {
    \\"stanza\\": \\"http://togostanza.org/resource/stanza#\\"
  },
  \\"@id\\": \\"hello\\",
  \\"stanza:label\\": \\"LABEL\\",
  \\"stanza:definition\\": \\"DEFINITION\\",
  \\"stanza:license\\": \\"LICENSE\\",
  \\"stanza:author\\": \\"AUTHOR\\",
  \\"stanza:contributor\\": [],
  \\"stanza:created\\": \\"2020-10-05\\",
  \\"stanza:updated\\": \\"2020-10-05\\",
  \\"stanza:parameter\\": [
    {
      \\"stanza:key\\": \\"say-to\\",
      \\"stanza:type\\": \\"string\\",
      \\"stanza:example\\": \\"world\\",
      \\"stanza:description\\": \\"who to say hello to\\",
      \\"stanza:required\\": false
    }
  ],
  \\"stanza:menu-placement\\": \\"bottom-right\\",
  \\"stanza:style\\": [
    {
      \\"stanza:key\\": \\"--greeting-color\\",
      \\"stanza:type\\": \\"color\\",
      \\"stanza:default\\": \\"#eb7900\\",
      \\"stanza:description\\": \\"text color of greeting\\"
    },
    {
      \\"stanza:key\\": \\"--greeting-align\\",
      \\"stanza:type\\": \\"single-choice\\",
      \\"stanza:choice\\": [
        \\"left\\",
        \\"center\\",
        \\"right\\"
      ],
      \\"stanza:default\\": \\"center\\",
      \\"stanza:description\\": \\"text align of greeting\\"
    }
  ],
  \\"stanza:incomingEvent\\": [],
  \\"stanza:outgoingEvent\\": []
}
",
      "style.scss": "// Load the repository-wide global style here. The actual file is located at ../common.scss for details.
@use '@/common.scss';

// The following is just an example. Feel free to modify it.
// --greeting-color and --greeting-align are style variables, which are defined in metadata.json.
main {
  padding: 1rem 2rem;
}

p.greeting {
  margin: 0;
  font-size: 24px;
  color: var(--greeting-color);
  text-align: var(--greeting-align);
}
",
      "templates": Object {
        "stanza.html.hbs": "<p class=\\"greeting\\">{{greeting}}</p>
",
      },
    },
  },
}
`;

exports[`generate stanza with camelCaseId 1`] = `
Array [
  null,
  "",
  "   create stanzas/hello-world/metadata.json
   create stanzas/hello-world/README.md
   create stanzas/hello-world/index.js
   create stanzas/hello-world/style.scss
   create stanzas/hello-world/assets/.keep
   create stanzas/hello-world/templates/stanza.html.hbs
",
]
`;

exports[`generate stanza with camelCaseId 2`] = `
Object {
  "stanzas": Object {
    "hello-world": Object {
      "README.md": "# LABEL

Stanza description goes here. Edit \`stanzas/hello-world/README.md\` to update.
",
      "assets": Object {
        ".keep": "",
      },
      "index.js": "import Stanza from 'togostanza/stanza';

export default class HelloWorld extends Stanza {
  async render() {
    this.renderTemplate(
      {
        template: 'stanza.html.hbs',
        parameters: {
          greeting: \`Hello, \${this.params['say-to']}!\`
        }
      }
    );
  }
}
",
      "metadata.json": "{
  \\"@context\\": {
    \\"stanza\\": \\"http://togostanza.org/resource/stanza#\\"
  },
  \\"@id\\": \\"hello-world\\",
  \\"stanza:label\\": \\"LABEL\\",
  \\"stanza:definition\\": \\"DEFINITION\\",
  \\"stanza:license\\": \\"LICENSE\\",
  \\"stanza:author\\": \\"AUTHOR\\",
  \\"stanza:contributor\\": [],
  \\"stanza:created\\": \\"2020-10-05\\",
  \\"stanza:updated\\": \\"2020-10-05\\",
  \\"stanza:parameter\\": [
    {
      \\"stanza:key\\": \\"say-to\\",
      \\"stanza:type\\": \\"string\\",
      \\"stanza:example\\": \\"world\\",
      \\"stanza:description\\": \\"who to say hello to\\",
      \\"stanza:required\\": false
    }
  ],
  \\"stanza:menu-placement\\": \\"bottom-right\\",
  \\"stanza:style\\": [
    {
      \\"stanza:key\\": \\"--greeting-color\\",
      \\"stanza:type\\": \\"color\\",
      \\"stanza:default\\": \\"#eb7900\\",
      \\"stanza:description\\": \\"text color of greeting\\"
    },
    {
      \\"stanza:key\\": \\"--greeting-align\\",
      \\"stanza:type\\": \\"single-choice\\",
      \\"stanza:choice\\": [
        \\"left\\",
        \\"center\\",
        \\"right\\"
      ],
      \\"stanza:default\\": \\"center\\",
      \\"stanza:description\\": \\"text align of greeting\\"
    }
  ],
  \\"stanza:incomingEvent\\": [],
  \\"stanza:outgoingEvent\\": []
}
",
      "style.scss": "// Load the repository-wide global style here. The actual file is located at ../common.scss for details.
@use '@/common.scss';

// The following is just an example. Feel free to modify it.
// --greeting-color and --greeting-align are style variables, which are defined in metadata.json.
main {
  padding: 1rem 2rem;
}

p.greeting {
  margin: 0;
  font-size: 24px;
  color: var(--greeting-color);
  text-align: var(--greeting-align);
}
",
      "templates": Object {
        "stanza.html.hbs": "<p class=\\"greeting\\">{{greeting}}</p>
",
      },
    },
  },
}
`;

exports[`init non-interactive ({"packageManager": "npm"}) 1`] = `
Array [
  null,
  "",
  "   create package.json
   create README.md
   create .gitignore
   create common.scss
   create assets/.keep
   create lib/.keep
   create .github/workflows/publish.yml
Skipping install command: npm install --cache-min 86400


I'm all done. Just run npm install to install the required dependencies.



Getting Started
---------------

Create a new stanza:

  $ cd some-repo
  $ npx togostanza generate stanza

Serve the repository locally:

  $ cd some-repo
  $ npx togostanza serve

Build stanzas for deployment:

  $ cd some-repo
  $ npx togostanza build

",
]
`;

exports[`init non-interactive ({"packageManager": "npm"}) 2`] = `
Object {
  "some-repo": Object {
    ".github": Object {
      "workflows": Object {
        "publish.yml": "name: Publish GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - uses: actions/setup-node@v1
        with:
          node-version: '14'

      - run: npm ci
      - run: npx togostanza build

      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: \${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
",
      },
    },
    ".gitignore": "/dist/
/node_modules/
",
    "README.md": "# some-repo

Visit https://ursm.github.io/some-repo/ to see the stanzas in this repository in action.

This was generated by [TogoStanza](http://togostanza.org), which enables the development of reusable web components that are embeddable into any web pages.

See [togostanza's README.md](https://github.com/togostanza/togostanza#readme) for details.

## To repository author

Describe about the repository here. These contents will help the repository users:

- What is this repository for?
- Who maintains this repository?
- ...
",
    "assets": Object {
      ".keep": "",
    },
    "common.scss": "/*

You can set up a global style here that is commonly used in each stanza.

Example:

h1 {
  font-size: 24px;
}

*/
",
    "lib": Object {
      ".keep": "",
    },
    "package.json": "{
  \\"name\\": \\"some-repo\\",
  \\"version\\": \\"0.0.1\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": \\"https://github.com/ursm/some-repo.git\\",
  \\"dependencies\\": {
    \\"togostanza\\": \\"^3.0.0-beta.38\\"
  },
  \\"engines\\": {
    \\"node\\": \\">=14\\"
  },
  \\"private\\": true
}
",
  },
}
`;

exports[`init non-interactive ({"packageManager": "yarn"}) 1`] = `
Array [
  null,
  "",
  "   create package.json
   create README.md
   create .gitignore
   create common.scss
   create assets/.keep
   create lib/.keep
   create .github/workflows/publish.yml
Skipping install command: yarn install


I'm all done. Just run yarn install to install the required dependencies.



Getting Started
---------------

Create a new stanza:

  $ cd some-repo
  $ yarn run togostanza generate stanza

Serve the repository locally:

  $ cd some-repo
  $ yarn run togostanza serve

Build stanzas for deployment:

  $ cd some-repo
  $ yarn run togostanza build

",
]
`;

exports[`init non-interactive ({"packageManager": "yarn"}) 2`] = `
Object {
  "some-repo": Object {
    ".github": Object {
      "workflows": Object {
        "publish.yml": "name: Publish GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - uses: actions/setup-node@v1
        with:
          node-version: '14'

      - run: yarn install --frozen-lockfile
      - run: yarn run togostanza build

      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: \${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
",
      },
    },
    ".gitignore": "/dist/
/node_modules/
",
    "README.md": "# some-repo

Visit https://ursm.github.io/some-repo/ to see the stanzas in this repository in action.

This was generated by [TogoStanza](http://togostanza.org), which enables the development of reusable web components that are embeddable into any web pages.

See [togostanza's README.md](https://github.com/togostanza/togostanza#readme) for details.

## To repository author

Describe about the repository here. These contents will help the repository users:

- What is this repository for?
- Who maintains this repository?
- ...
",
    "assets": Object {
      ".keep": "",
    },
    "common.scss": "/*

You can set up a global style here that is commonly used in each stanza.

Example:

h1 {
  font-size: 24px;
}

*/
",
    "lib": Object {
      ".keep": "",
    },
    "package.json": "{
  \\"name\\": \\"some-repo\\",
  \\"version\\": \\"0.0.1\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": \\"https://github.com/ursm/some-repo.git\\",
  \\"dependencies\\": {
    \\"togostanza\\": \\"^3.0.0-beta.38\\"
  },
  \\"engines\\": {
    \\"node\\": \\">=14\\"
  },
  \\"private\\": true
}
",
  },
}
`;

exports[`init with scp-like repository url 1`] = `
Array [
  null,
  "",
  "   create package.json
   create README.md
   create .gitignore
   create common.scss
   create assets/.keep
   create lib/.keep
   create .github/workflows/publish.yml
Skipping install command: npm install --cache-min 86400


I'm all done. Just run npm install to install the required dependencies.



Getting Started
---------------

Create a new stanza:

  $ cd some-repo
  $ npx togostanza generate stanza

Serve the repository locally:

  $ cd some-repo
  $ npx togostanza serve

Build stanzas for deployment:

  $ cd some-repo
  $ npx togostanza build

",
]
`;

exports[`init with scp-like repository url 2`] = `
Object {
  "some-repo": Object {
    ".github": Object {
      "workflows": Object {
        "publish.yml": "name: Publish GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - uses: actions/setup-node@v1
        with:
          node-version: '14'

      - run: npm ci
      - run: npx togostanza build

      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: \${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
",
      },
    },
    ".gitignore": "/dist/
/node_modules/
",
    "README.md": "# some-repo

Visit https://ursm.github.io/some-repo/ to see the stanzas in this repository in action.

This was generated by [TogoStanza](http://togostanza.org), which enables the development of reusable web components that are embeddable into any web pages.

See [togostanza's README.md](https://github.com/togostanza/togostanza#readme) for details.

## To repository author

Describe about the repository here. These contents will help the repository users:

- What is this repository for?
- Who maintains this repository?
- ...
",
    "assets": Object {
      ".keep": "",
    },
    "common.scss": "/*

You can set up a global style here that is commonly used in each stanza.

Example:

h1 {
  font-size: 24px;
}

*/
",
    "lib": Object {
      ".keep": "",
    },
    "package.json": "{
  \\"name\\": \\"some-repo\\",
  \\"version\\": \\"0.0.1\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": \\"https://github.com/ursm/some-repo.git\\",
  \\"dependencies\\": {
    \\"togostanza\\": \\"^3.0.0-beta.38\\"
  },
  \\"engines\\": {
    \\"node\\": \\">=14\\"
  },
  \\"private\\": true
}
",
  },
}
`;

exports[`upgrade move stanza into stanzas/ 1`] = `
"move  hello -> stanzas/hello

No files selected, nothing to do. 
All done. 
Results: 
0 errors
0 unmodified
0 skipped
0 ok

"
`;

exports[`upgrade move stanza into stanzas/ 2`] = `""`;

exports[`upgrade move stanza into stanzas/ 3`] = `
Object {
  "stanzas": Object {
    "hello": Object {
      "metadata.json": "{}",
    },
  },
}
`;
